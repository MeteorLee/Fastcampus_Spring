/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.84
 * Generated at: 2022-12-23 11:42:01 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.ResultSet;
import java.sql.Statement;
import org.apache.tomcat.dbcp.dbcp2.PoolingConnection.StatementType;
import java.sql.PreparedStatement;
import com.mysql.cj.xdevapi.PreparableStatement;
import java.sql.DriverManager;
import java.sql.Connection;

public final class save_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.mysql.cj.xdevapi.PreparableStatement");
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("java.sql.Statement");
    _jspx_imports_classes.add("java.sql.PreparedStatement");
    _jspx_imports_classes.add("org.apache.tomcat.dbcp.dbcp2.PoolingConnection.StatementType");
    _jspx_imports_classes.add("java.sql.DriverManager");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	request.setCharacterEncoding("utf-8");
	// 제목 입력 받은 값 변수에 담음
	String boardSeq = request.getParameter("boardSeq");
	String title = request.getParameter("title");
	// 내용
	String contents = request.getParameter("contents");
	
	// 검증
	boolean validate = true;
	// 에러 메세지
	String message = null;
	// null 또는 공백일 때
	if (title == null || title.isEmpty()) {
		message = "제목을 입력해주세요";
		validate = false;
	}
	// null 또는 공백일 때
	if (validate && contents == null || contents.isEmpty()) {
		message = "내용을 입력해주세요";
		validate = false;
	}
	boolean save = false;
	// 모든 필수 체크 로직이 성공했다면
	if (validate) {
		// DB에 접속을 하고 위에 내용을 저장하는 소스 구현
		Connection connection = null;
		PreparedStatement stmt = null;
		boolean update = false;
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			// 데이터베이스 접촉을 위한 정보 set
			String jdbcUrl = "jdbc:mysql://localhost:3307/profile";
			// db 설치시 기입한 접속 정보set
			String user = "root";
			String password = "1234";
			// db 접속 커넥션을 획득
			connection = DriverManager.getConnection(jdbcUrl, user, password);
			
			
				// DB 커넥션 소스를 구현해야되요.
				
				// 편집화면에서 업데이트 요청인 경우..
				if (boardSeq != null && !boardSeq.isEmpty()) {
					String sql = "SELECT BOARD_SEQ, TITLE, CONTENTS, REG_DATE FROM T_BOARD " + 
							"WHERE BOARD_SEQ = " + boardSeq;
					Statement stmt2 = connection.createStatement();
					ResultSet rs = stmt2.executeQuery(sql);
					
					while (rs.next()) {
						update = true;
					}
				}
				
				
				
				String sql = null;
				
				//업데이트인 경우
				if (update){
					message = "게시물 편집이 완료되었습니다.";
					sql = "UPDATE T_BOARD SET TITLE = ?, CONTENTS = ? WHERE BOARD_SEQ = ?" ;
				} else {
					message = "게시물 등록이 완료되었습니다.";
					sql = "INSERT INTO T_BOARD (TITLE, CONTENTS, REG_DATE) " + 
							"VALUES (?, ?, NOW())";
					
				}
			
			
			// sql 쿼리를 실행하기 위한 statement 획득
			stmt = connection.prepareStatement(sql);
			stmt.setString(1, title);
			stmt.setString(2, contents);
			if (update){
				stmt.setString(3, boardSeq);
			}
			
			// database에 INSERT 쿼리를 실행 후 결과를 리턴 함
			int result = stmt.executeUpdate();
			if (result == 0) {
				message = "게시물 등록 중 오류가 발생 했습니다.";
			} else {
				save = true;
			}
			
			// DB 커넥션 소스 구현
		} catch (Exception e) {
			e.printStackTrace();
			message = "게시물 등록 중 DTATBASE 오류가 발생하였습니다.";
		}
	}
	

      out.write("\r\n");
      out.write("    \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<script>\r\n");
      out.write("		// 성공 실패에 대한 값을 set\r\n");
      out.write("		var save = ");
      out.print(save);
      out.write(";\r\n");
      out.write("		// 성공 또는 오류 메세지를 set\r\n");
      out.write("		var message = '");
      out.print(message);
      out.write("';\r\n");
      out.write("		if (save) {\r\n");
      out.write("			alert(message);\r\n");
      out.write("			location.href = '/board/list.jsp';\r\n");
      out.write("		} else {\r\n");
      out.write("			alert(message);\r\n");
      out.write("			history.back(-1);\r\n");
      out.write("		}\r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
